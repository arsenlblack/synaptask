"use strict";(self.webpackChunksynaptask_docs=self.webpackChunksynaptask_docs||[]).push([[772],{5387:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"api/ws/get_graph","title":"graph:get","description":"Retrieve the graph visible to the authenticated user via WebSocket.","source":"@site/docs/api/ws/get_graph.md","sourceDirName":"api/ws","slug":"/guides/share-access","permalink":"/guides/share-access","draft":false,"unlisted":false,"editUrl":"https://github.com/arsenlblack/synaptask/edit/main/docs/api/ws/get_graph.md","tags":[],"version":"current","lastUpdatedBy":"admin","lastUpdatedAt":1757823755000,"frontMatter":{"title":"graph:get","slug":"/guides/share-access"},"sidebar":"tutorialSidebar","previous":{"title":"WebSocket Coonnect","permalink":"/api/ws/ws_connect"},"next":{"title":"GET /api/graph","permalink":"/api/rest/get_graph"}}');var r=t(4848),i=t(8453);const a={title:"graph:get",slug:"/guides/share-access"},o=void 0,l={},c=[{value:"Client \u2192 Server <code>graph:get</code>",id:"client--server-graphget",level:3},{value:"Server \u2192 Client <code>graph:init</code>",id:"server--client-graphinit",level:3},{value:"Success",id:"success",level:4},{value:"Error <code>graph:error</code>",id:"error-grapherror",level:4},{value:"Rate Limits",id:"rate-limits",level:2},{value:"Example (JavaScript)",id:"example-javascript",level:2},{value:"Example (Python)",id:"example-python",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Retrieve the graph visible to the authenticated user via WebSocket."}),"\n",(0,r.jsxs)(n.h3,{id:"client--server-graphget",children:["Client \u2192 Server ",(0,r.jsx)(n.code,{children:"graph:get"})]}),"\n",(0,r.jsx)(n.p,{children:"Request part of the user\u2019s graph over WebSocket."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "limit": 1000,\n  "offset": 0\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"server--client-graphinit",children:["Server \u2192 Client ",(0,r.jsx)(n.code,{children:"graph:init"})]}),"\n",(0,r.jsx)(n.h4,{id:"success",children:"Success"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "hasMore": true,\n  "graph": {\n    "nodes": [\n      {\n        "id": "uuid",\n        "title": "string",\n        "description": "string",\n        "status": 0,\n        "dueDate": "2025-09-13T10:00:00Z",\n        "type": 0,\n        "tags": "csv",\n        "volume": 5,\n        "version": 0,\n        "asignee": [],\n        "createdTime": "2025-09-13T10:00:00Z",\n        "lastEditedTime": "2025-09-13T10:00:00Z",\n        "ownerUsername": "BLACK",\n        "ownerEmail": "mail@synaptask.space",\n        "publicToken": "string",\n        "x": 0.0,\n        "y": 0.0,\n        "z": 0.0,\n        "pinned": false,\n        "collapsed": false,\n        "access": 0,     \n      }\n    ],\n    "links": [\n      {\n        "id": "uuid",\n        "source": "nodeId",\n        "target": "nodeId",\n        "type": 0,\n        "version": 0,\n        "wasBlocker": false,\n      }\n    ]\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"error-grapherror",children:["Error ",(0,r.jsx)(n.code,{children:"graph:error"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{ "error": "internal" }\n'})}),"\n",(0,r.jsx)(n.h2,{id:"rate-limits",children:"Rate Limits"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"10 / 10s"})," per user."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-javascript",children:"Example (JavaScript)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// Request first page of graph (1000 items by default)\nsocket.emit('graph:get', { limit: 1000, offset: 0 });\n\nlet allNodes = [];\nlet allLinks = [];\n\nsocket.on('graph:init', (data) => {\n  console.log('Received graph chunk:', data);\n\n  // Append received chunk\n  allNodes.push(...(data.graph.nodes || []));\n  allLinks.push(...(data.graph.links || []));\n\n  // If there are more pages \u2013 request next\n  if (data.graph.hasMore) {\n    const nextOffset = allNodes.length;\n    socket.emit('graph:get', { limit: 1000, offset: nextOffset });\n  } else {\n    console.log('Graph fully loaded');\n    console.log('Total nodes:', allNodes.length);\n    console.log('Total links:', allLinks.length);\n  }\n});\n\nsocket.on('graph:error', (err) => {\n  console.error('Graph request failed:', err);\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"example-python",children:"Example (Python)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import socketio\n\nAPI_URL = "https://synaptask.space"\nAPI_TOKEN = "<YOUR_API_TOKEN>"\n\nsio = socketio.Client(logger=False, engineio_logger=False)\n\nall_nodes, all_links = [], []\nlimit, offset = 1000, 0\n\n@sio.event\ndef connect():\n    print("connected, sid:", sio.sid)\n    # \u0442\u0456\u043b\u044c\u043a\u0438 \u043f\u0456\u0441\u043b\u044f connect() \u2014 \u043f\u0435\u0440\u0448\u0438\u0439 emit\n    sio.emit("graph:get", {"limit": limit, "offset": offset})\n\n@sio.on("graph:init")\ndef on_graph(data):\n    global offset\n    graph = data.get("graph", {})\n    nodes = graph.get("nodes", [])\n    links = graph.get("links", [])\n\n    all_nodes.extend(nodes)\n    all_links.extend(links)\n    print(f"chunk: +{len(nodes)} nodes, +{len(links)} links (offset={offset})")\n\n    if graph.get("hasMore"):\n        offset += limit\n        sio.emit("graph:get", {"limit": limit, "offset": offset})\n    else:\n        print("done:", len(all_nodes), "nodes,", len(all_links), "links")\n        sio.disconnect()\n\n@sio.on("graph:error")\ndef on_graph_error(err):\n    print("graph error:", err)\n    sio.disconnect()\n\n@sio.event\ndef connect_error(e):\n    print("connect_error:", e)\n\n@sio.event\ndef disconnect():\n    print("disconnected")\n\n# \u0432\u0430\u0436\u043b\u0438\u0432\u043e: transports=["websocket"], \u0456 \u0442\u043e\u043a\u0435\u043d \u0432 auth\nsio.connect(API_URL, auth={"api_token": API_TOKEN}, transports=["websocket"], wait_timeout=10)\nsio.wait()\n'})}),"\n",(0,r.jsxs)(n.p,{children:["See also: ",(0,r.jsx)(n.a,{href:"/api/rest/get_graph",children:"REST /api/graph"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);